name: Build and Publish NuGet Package

on:
  push:
    tags:
      - 'v*'  # 仅当推送的标签匹配 'v*' 格式时才触发

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Extract version from tag
        id: get_version
        shell: pwsh
        run: |
          $tag = "${{ github.ref }}".Replace('refs/tags/v', '')
          echo "VERSION=$tag" >> $env:GITHUB_OUTPUT
          echo "Version extracted: $tag"

      - name: Update version in project file
        shell: pwsh
        run: |
          $version = "${{ steps.get_version.outputs.VERSION }}"
          $files = Get-ChildItem -Recurse -Filter *.csproj
          foreach ($file in $files) {
            $content = Get-Content -Path $file.FullName
            $updated = $content -replace '<Version>.*?</Version>', "<Version>$version</Version>"
            $updated = $updated -replace '<PackageVersion>.*?</PackageVersion>', "<PackageVersion>$version</PackageVersion>"
            $updated = $updated -replace '<AssemblyVersion>.*?</AssemblyVersion>', "<AssemblyVersion>$version</AssemblyVersion>"
            $updated = $updated -replace '<FileVersion>.*?</FileVersion>', "<FileVersion>$version</FileVersion>"
            Set-Content -Path $file.FullName -Value $updated
            echo "Updated version in $($file.FullName) to $version"
          }

      - name: Install Visual Studio Build Tools
        run: |
          choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.ManagedDesktopBuildTools --includeRecommended --includeOptional"
        shell: powershell

      - name: Install Windows SDK
        run: |
          choco install windows-sdk-10.0
        shell: powershell

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Pack
        run: dotnet pack --configuration Release --no-build --output ./nupkg

      - name: List generated NuGet packages
        run: dir ./nupkg

      - name: Upload NuGet package
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package
          path: ./nupkg/*.nupkg

  publish:
    needs: build
    runs-on: windows-latest

    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Download NuGet package
        uses: actions/download-artifact@v4
        with:
          name: nuget-package
          path: ./nupkg

      - name: List downloaded packages
        run: dir ./nupkg

      - name: Publish to NuGet (PowerShell)
        shell: powershell
        run: |
          $packages = Get-ChildItem -Path "./nupkg" -Filter "*.nupkg"
          foreach ($package in $packages) {
            dotnet nuget push $package.FullName --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
          }
